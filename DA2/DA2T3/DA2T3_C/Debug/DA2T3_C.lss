
DA2T3_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000122  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000de  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000125  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000514  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000019f  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004a  00000000  00000000  000006d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00000721  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
int main(void)
{
	unsigned char x = 1<<DDC0;		// waveform var
	unsigned char counter = 0;		// counter to output
	// I decided to use pinC 4 and 5 instead since pin 6 is used for reset.
	DDRC = (1<<DDC4) | (1<<DDC5);
  80:	80 e3       	ldi	r24, 0x30	; 48
  82:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xFF;					// set PORTB as output
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	84 b9       	out	0x04, r24	; 4
	PORTB = counter;				// output the count to PORTB
  88:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	2f e7       	ldi	r18, 0x7F	; 127
  8c:	4a e1       	ldi	r20, 0x1A	; 26
  8e:	86 e0       	ldi	r24, 0x06	; 6
  90:	21 50       	subi	r18, 0x01	; 1
  92:	40 40       	sbci	r20, 0x00	; 0
  94:	80 40       	sbci	r24, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <main+0x10>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x1a>
  9a:	00 00       	nop
#include <util/delay.h>

int main(void)
{
	unsigned char x = 1<<DDC0;		// waveform var
	unsigned char counter = 0;		// counter to output
  9c:	20 e0       	ldi	r18, 0x00	; 0
	DDRB = 0xFF;					// set PORTB as output
	PORTB = counter;				// output the count to PORTB
	while (1)
	{
		_delay_ms(250);		// delay for 0.25 s
		x ^= 1<<PORTC0;		// toggle x
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	31 e0       	ldi	r19, 0x01	; 1
		if (x == 1) {			// if x is on rising edge,
			PORTB = ++counter;	// increment count.
			if (counter % 5 == 0) {
  a2:	5d ec       	ldi	r21, 0xCD	; 205
				PORTC ^= (1<<PINC5);
  a4:	60 e2       	ldi	r22, 0x20	; 32
				if (counter % 10 == 0)
					PORTC ^= (1<<PINC4);
  a6:	70 e1       	ldi	r23, 0x10	; 16
  a8:	9f e7       	ldi	r25, 0x7F	; 127
  aa:	ea e1       	ldi	r30, 0x1A	; 26
  ac:	46 e0       	ldi	r20, 0x06	; 6
  ae:	91 50       	subi	r25, 0x01	; 1
  b0:	e0 40       	sbci	r30, 0x00	; 0
  b2:	40 40       	sbci	r20, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x2e>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x38>
  b8:	00 00       	nop
	DDRB = 0xFF;					// set PORTB as output
	PORTB = counter;				// output the count to PORTB
	while (1)
	{
		_delay_ms(250);		// delay for 0.25 s
		x ^= 1<<PORTC0;		// toggle x
  ba:	83 27       	eor	r24, r19
		if (x == 1) {			// if x is on rising edge,
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	a1 f7       	brne	.-24     	; 0xa8 <main+0x28>
			PORTB = ++counter;	// increment count.
  c0:	2f 5f       	subi	r18, 0xFF	; 255
  c2:	25 b9       	out	0x05, r18	; 5
			if (counter % 5 == 0) {
  c4:	25 9f       	mul	r18, r21
  c6:	91 2d       	mov	r25, r1
  c8:	11 24       	eor	r1, r1
  ca:	96 95       	lsr	r25
  cc:	96 95       	lsr	r25
  ce:	49 2f       	mov	r20, r25
  d0:	44 0f       	add	r20, r20
  d2:	44 0f       	add	r20, r20
  d4:	94 0f       	add	r25, r20
  d6:	29 13       	cpse	r18, r25
  d8:	e7 cf       	rjmp	.-50     	; 0xa8 <main+0x28>
				PORTC ^= (1<<PINC5);
  da:	98 b1       	in	r25, 0x08	; 8
  dc:	96 27       	eor	r25, r22
  de:	98 b9       	out	0x08, r25	; 8
				if (counter % 10 == 0)
  e0:	25 9f       	mul	r18, r21
  e2:	91 2d       	mov	r25, r1
  e4:	11 24       	eor	r1, r1
  e6:	96 95       	lsr	r25
  e8:	96 95       	lsr	r25
  ea:	96 95       	lsr	r25
  ec:	99 0f       	add	r25, r25
  ee:	49 2f       	mov	r20, r25
  f0:	44 0f       	add	r20, r20
  f2:	44 0f       	add	r20, r20
  f4:	94 0f       	add	r25, r20
  f6:	29 13       	cpse	r18, r25
  f8:	d7 cf       	rjmp	.-82     	; 0xa8 <main+0x28>
					PORTC ^= (1<<PINC4);
  fa:	98 b1       	in	r25, 0x08	; 8
  fc:	97 27       	eor	r25, r23
  fe:	98 b9       	out	0x08, r25	; 8
 100:	d3 cf       	rjmp	.-90     	; 0xa8 <main+0x28>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
