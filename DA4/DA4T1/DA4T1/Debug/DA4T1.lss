
DA4T1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000166  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000334  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000113  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000018d  00000000  00000000  000006ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000838  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001c0  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000159  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00000ba5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 75 00 	call	0xea	; 0xea <main>
  78:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <fadeRed>:
	return 0;
}

void fadeRed(unsigned char start, unsigned char stop, char step)
{
	for (OCR2A = start; OCR2A != stop; OCR2A += step)
  80:	e3 eb       	ldi	r30, 0xB3	; 179
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 83       	st	Z, r24
  86:	80 81       	ld	r24, Z
  88:	86 17       	cp	r24, r22
  8a:	61 f0       	breq	.+24     	; 0xa4 <fadeRed+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	8f e0       	ldi	r24, 0x0F	; 15
  8e:	97 e2       	ldi	r25, 0x27	; 39
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <fadeRed+0x10>
  94:	00 c0       	rjmp	.+0      	; 0x96 <fadeRed+0x16>
  96:	00 00       	nop
  98:	80 81       	ld	r24, Z
  9a:	84 0f       	add	r24, r20
  9c:	80 83       	st	Z, r24
  9e:	80 81       	ld	r24, Z
  a0:	86 13       	cpse	r24, r22
  a2:	f4 cf       	rjmp	.-24     	; 0x8c <fadeRed+0xc>
  a4:	08 95       	ret

000000a6 <fadeGreen>:
	}
}

void fadeGreen(unsigned char start, unsigned char stop, char step)
{
	for (OCR0A = start; OCR0A != stop; OCR0A += step)
  a6:	87 bd       	out	0x27, r24	; 39
  a8:	87 b5       	in	r24, 0x27	; 39
  aa:	86 17       	cp	r24, r22
  ac:	61 f0       	breq	.+24     	; 0xc6 <fadeGreen+0x20>
  ae:	8f e0       	ldi	r24, 0x0F	; 15
  b0:	97 e2       	ldi	r25, 0x27	; 39
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <fadeGreen+0xc>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <fadeGreen+0x12>
  b8:	00 00       	nop
  ba:	87 b5       	in	r24, 0x27	; 39
  bc:	84 0f       	add	r24, r20
  be:	87 bd       	out	0x27, r24	; 39
  c0:	87 b5       	in	r24, 0x27	; 39
  c2:	86 13       	cpse	r24, r22
  c4:	f4 cf       	rjmp	.-24     	; 0xae <fadeGreen+0x8>
  c6:	08 95       	ret

000000c8 <fadeBlue>:
	}
}

void fadeBlue(unsigned char start, unsigned char stop, char step)
{
	for (OCR0B = start; OCR0B != stop; OCR0B += step)
  c8:	88 bd       	out	0x28, r24	; 40
  ca:	88 b5       	in	r24, 0x28	; 40
  cc:	86 17       	cp	r24, r22
  ce:	61 f0       	breq	.+24     	; 0xe8 <fadeBlue+0x20>
  d0:	8f e0       	ldi	r24, 0x0F	; 15
  d2:	97 e2       	ldi	r25, 0x27	; 39
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <fadeBlue+0xc>
  d8:	00 c0       	rjmp	.+0      	; 0xda <fadeBlue+0x12>
  da:	00 00       	nop
  dc:	88 b5       	in	r24, 0x28	; 40
  de:	84 0f       	add	r24, r20
  e0:	88 bd       	out	0x28, r24	; 40
  e2:	88 b5       	in	r24, 0x28	; 40
  e4:	86 13       	cpse	r24, r22
  e6:	f4 cf       	rjmp	.-24     	; 0xd0 <fadeBlue+0x8>
  e8:	08 95       	ret

000000ea <main>:
void fadeBlue(unsigned char, unsigned char, char);		// fade output compare register to control blue's pwm signal.

int main ()
{
	// Set output compare pins as output. 
	DDRD = (1<<DDD5) | (1<<DDD6);
  ea:	80 e6       	ldi	r24, 0x60	; 96
  ec:	8a b9       	out	0x0a, r24	; 10
	DDRB = (1<<DDB3);
  ee:	88 e0       	ldi	r24, 0x08	; 8
  f0:	84 b9       	out	0x04, r24	; 4
	// Set up timer0 for colors Red and Green
	// Phase correct, clear on compare match when up counting, and set on compare match when down counting. 
	TCCR0A = (1<<COM0A1) | (0<<COM0A0) | (1<<COM0B1) | (0<<COM0B0) | (1<<WGM00); // set phase correct mode. 
  f2:	81 ea       	ldi	r24, 0xA1	; 161
  f4:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01) | (0<<CS00);			// prescaler of 64
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	85 bd       	out	0x25, r24	; 37
	// Set up timer2 for color Blue
	// Same configuration as timer0
	TCCR2A = (1<<COM2A1) | (0<<COM2A0) | (1<<WGM20);
  fa:	81 e8       	ldi	r24, 0x81	; 129
  fc:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = (1<<CS22);						// prescaler of 64
 100:	84 e0       	ldi	r24, 0x04	; 4
 102:	80 93 b1 00 	sts	0x00B1, r24
	// Initialize output compare registers to BOTTOM value for 10% duty cycle
	OCR0A = BOTTOM;	// RED
 106:	89 e1       	ldi	r24, 0x19	; 25
 108:	87 bd       	out	0x27, r24	; 39
	OCR0B = BOTTOM;	// GREEN
 10a:	88 bd       	out	0x28, r24	; 40
	OCR2A = BOTTOM;	// BLUE
 10c:	80 93 b3 00 	sts	0x00B3, r24
	while (1)
	{
		// rgb values traversed as 3 bit grey code
		
		// Increment blue pwm signal	0 0 1
		fadeBlue(BOTTOM, TOP, STEP);
 110:	41 e0       	ldi	r20, 0x01	; 1
 112:	65 ee       	ldi	r22, 0xE5	; 229
 114:	89 e1       	ldi	r24, 0x19	; 25
 116:	0e 94 64 00 	call	0xc8	; 0xc8 <fadeBlue>
		
		// Increment green pwm signal	0 1 1
		fadeGreen(BOTTOM, TOP, STEP);
 11a:	41 e0       	ldi	r20, 0x01	; 1
 11c:	65 ee       	ldi	r22, 0xE5	; 229
 11e:	89 e1       	ldi	r24, 0x19	; 25
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <fadeGreen>

		// decrement blue pwm signal	0 1 0
		fadeGreen(TOP, BOTTOM, -STEP);
 124:	4f ef       	ldi	r20, 0xFF	; 255
 126:	69 e1       	ldi	r22, 0x19	; 25
 128:	85 ee       	ldi	r24, 0xE5	; 229
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <fadeGreen>
		
		// Increment red pwm signal		1 1 0
		fadeRed(BOTTOM, TOP, STEP);
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	65 ee       	ldi	r22, 0xE5	; 229
 132:	89 e1       	ldi	r24, 0x19	; 25
 134:	0e 94 40 00 	call	0x80	; 0x80 <fadeRed>
		
		// Increment blue pwm signal	1 1 1
		fadeBlue(BOTTOM, TOP, STEP);
 138:	41 e0       	ldi	r20, 0x01	; 1
 13a:	65 ee       	ldi	r22, 0xE5	; 229
 13c:	89 e1       	ldi	r24, 0x19	; 25
 13e:	0e 94 64 00 	call	0xc8	; 0xc8 <fadeBlue>
		
		// Decrement green pwm signal	1 0 1
		fadeGreen(TOP, BOTTOM, -STEP);
 142:	4f ef       	ldi	r20, 0xFF	; 255
 144:	69 e1       	ldi	r22, 0x19	; 25
 146:	85 ee       	ldi	r24, 0xE5	; 229
 148:	0e 94 53 00 	call	0xa6	; 0xa6 <fadeGreen>
		
		// Decrement blue pwm signal	1 0 0
		fadeBlue(TOP, BOTTOM, -STEP);
 14c:	4f ef       	ldi	r20, 0xFF	; 255
 14e:	69 e1       	ldi	r22, 0x19	; 25
 150:	85 ee       	ldi	r24, 0xE5	; 229
 152:	0e 94 64 00 	call	0xc8	; 0xc8 <fadeBlue>
		
		// Decrement red pwm signal		0 0 0
		fadeRed(TOP, BOTTOM, -STEP);
 156:	4f ef       	ldi	r20, 0xFF	; 255
 158:	69 e1       	ldi	r22, 0x19	; 25
 15a:	85 ee       	ldi	r24, 0xE5	; 229
 15c:	0e 94 40 00 	call	0x80	; 0x80 <fadeRed>
		
	}
 160:	d7 cf       	rjmp	.-82     	; 0x110 <main+0x26>

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
